-*- org -*-

* TODO Add README
* Firefox plugin
** [0/4] Milestone Version 0.1---Basic Functionality
*** [3/6] Handle internal state
**** DONE Track state of tabs
     CLOSED: [2025-07-17 Thu 05:45]
     Update internal state for tabs as they are opened/closed/reopened.
**** DONE Track state of windows
     CLOSED: [2025-07-17 Thu 06:20]
     Update internal state for windows as they are opened/closed/reopened.
**** DONE Track current tab for each window
     CLOSED: [2025-07-17 Thu 07:54]
     Update `meta.pos` (the index of the currently selected tab).
**** [7/9] Scan tabs/windows
***** DONE Basic listing of all tabs & windows
      CLOSED: [2025-07-19 Sat 11:21]
***** DONE Include rewinWinId & rewinTabId in list
      CLOSED: [2025-07-20 Sun 00:35]
***** DONE Set window metadata 'active' to rewinTabId
      CLOSED: [2025-07-20 Sun 00:49]
***** DONE scanTabs() should write favicon properly
      CLOSED: [2025-07-24 Thu 10:40]
***** DONE Don't use await naÃ¯vely in scanTabs()
      CLOSED: [2025-07-24 Thu 10:40]
      Can we fit run the whole loop, with inventorying the tabs/windows AND
      saving Rewin ID's into single a loop?

      The loop that adds rewinWinId & rewinTabId to the list uses await in a
      very clumsy manner. Rather than solving everything sequentially, and
      using blocking awaits at all points, use `.then()` and parallelize as
      much as possible. (But still output the information, only after the data
      has been fully annotated with the Rewin ID info.)
***** DONE scanTabs() don't set 'partial' for tabs with no history
      CLOSED: [2025-07-24 Thu 18:08]
***** DONE Rewin badge should reflect 'partial' status for tab
      CLOSED: [2025-07-24 Thu 22:07]
***** TODO scanTabs() should not overwrite existing data
***** TODO Set `recs` global var (tab/window/favicon records)
**** TODO Make background script non-persistent
     MDN says that `persistent: true` isn't allowed by manifest 3. (But it seems
     to work quite well on my machine?)
     https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/background

     Anyway, clearly we should get rid of this and only use storage.local.
     https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Background_scripts

     This also means removing the use of `tabMap` and `winmap` variables
     (replacing them with `browser.sessions.getTabValue` and
     `browser.sessions.getWindowValue`).
**** TODO Track tab list
     Add tabs as they're added to the window. Remove tabs that are dragged into
     their own window.
**** TODO Track navigation history
*** [0/3] Basic history recording (for current tab)
**** TODO Update history records when user follows links
     Use `onReferenceFragmentUpdated`, `onCommitted`, `onHistoryStateUpdated`
     and events to listen for user navigation.
**** TODO Show actual history data in popup menu
     (But without favicons.)
**** TODO Basic back/forward navigation handling
     Simple handling of back/forward history navigation. This does not include
     heuristics to disambiguate when the same URL appears multiple times in
     history. In these cases, simply assume the page closest to (what is
     currently believed to be the current page) is the page navigated to by the
     user.
*** TODO Always skip false values when writing values to storage.local
    Currently, these values are set to `undefined`---as I thought that that
    meant they wouldn't be stored, but that turned out to be wrong. Instead of
    assigning, for example metadata, like this:

      const tabMeta = {
        pos: 0,
        partial: histLength > 1 || undefined,
      }

    It should be written like this:

      const tabMeta = Object.assign(
        { pos: 0 },
        histLength === 1 ? {} : { partial: 1 },
      )
*** TODO 'Restore tab' function
*** TODO Update Rewin internal state
    Rewin should look at presently existing tabs and windows, and if there are
    discrepancies between the observable state, and Rewin's internal state the
    badge text should be set to '!', and the popup menu should display a button
    for scanning the current browser state, and update Rewin's internal state
    based on that.

    This function is basically sure to be triggered on install.

    browser.tabs.goBack(tabId).then(onGoBack, onError)
*** TODO If a favicon already exists, don't overwrite
** [0/1] Milestone Version 0.2---Favicon support
*** TODO History menu should now include favicons
    Favicons aren't loaded when a page load originally, so we need to listen
    for special event or something to catch these when they arrive. Also,
    storing these in `storage.local` should use some kinda checksum (rather
    than a random value) so that they do not need to be stored over and over
    when they are identical (as they're likely to be in the case of subpages to
    any given website).
** [0/0] Milestone Version 0.3---Better back/forward detection(?)
   If history contains the same URL twice, we cannot know which instance of the
   page is the current one when a user goes back in history. EXCEPT:

   + If a user then clicks a link on the page (rather that get out of there
     using back/forward), `history.length` gets truncated revealing the (we
     were at) place in history.

   + A variable might be stored in `history.state` using `history.pushState()`
     or `history.replaceState()`. There's some additional complication here, in
     that when hash fragment navigation (when only the location hash changes)
     are counted as the same page as far as `history.state` is concerned,
     meaning a new `history.state` will have to be created (by means of
     `history.pushState()`) just before the new hash is navigated to (using a
     content script and 'beforeunload' event?). (Also, this might interfere with
     scripts that use `history.pushState()` and `history.replaceState()`?)
** [0/1] Milestone Version 0.4---Restore Window
*** TODO 'Restore window' function
*** TODO Add Rewin to zrajm.org main menu
** [0/1] Milestone Version 1.0---Browser Restart
*** TODO Reassociate existing windows with internal history data on restart
    https://stackoverflow.com/a/14518800/351162
** TODO Switching to window on different desktop when focused
   This is not implemented by default. This actually seem to be a lack in
   Openbox, so we'd need a script that monitors when a window is focused, which
   navigates to the corresponding desktop.

   Might also be able to switch using the 'DEMANDS_ATTENTION' flag (which can
   be set using `xdotool getactivewindow set_window --urgency 1`).

   EWMH-compliant command line tools:
   + `propwatch` (part of `xawtv-tools` Debian package)---
   + `xprop`
   + `xwininfo`
   + `xdotool`
   + `wmctrl`
   + `obxprop` (openbox-specific)

   Urgency Detection: When a PropertyNotify event is received for WM_HINTS or
   _NET_WM_STATE, the script would check if the urgency bit or the
   _NET_WM_STATE_DEMANDS_ATTENTION atom is set.

   'Urgent property' = '_NET_WM_STATE_DEMANDS_ATTENTION'.

   I haven't been able to find a program to monitor window property changes.
   (There's `xprop -spy` but it only monitors ONE window---not all of them.)

   This command might be useful:

   + 'xdotool windowactivate <WINDOWID>'---Activate the window. This command is
     different from windowfocus: if the window is on another desktop, we will
     switch to that desktop.
** TODO Implement 'Window Titler' function
   Should be able to set a prefix for window titles. This can probably be
   implemented using `browser.windows.update({ titlePreface: <STRING> })`.
   https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/update
** TODO Reopening a tab should connect to old history
   What happens when a tab is reopened (with a complete history). Does it get
   the same window ID? (Even if it does, is this true on restart when all
   windows are reopened?) Can we uniquely identify which previously registered
   history belongs to this newly reopened tab by just looking at
   `history.length` and one URL that we can see? (If there's only one matching
   history, we should be fine, right? Can we try `history.back()` and check if
   that matches the history too, if necessary?)
** TODO Smaller format for storing favicons in storage.local?
   Currently favicons are stored in PNG base64 format, but this in kinda
   clunky. Storing binary in strings seems to be a bad idea (it's either
   unreliable or unnecessarily big, since Javascript uses UTF-16 internally),
   but Uint8Arrays (or similar) may be used?

   function base64ToUint8Array(base64) {
     return new Uint8Array([...atob(base64)].map(chr => chr.charCodeAt(0)))
   }

   NOTE: `localStorage`, and `storage.local` can store very different types of
   data structures!
** TODO scanTabs() read data from 'recently closed' tabs & windows
** TODO scanTabs() favicon improvement
   When normalizeFavicon() fails, it should return a default icon to be used.
   (Maybe a PNG-ized version of the 'category-sitepermission.svg' icon found
   here 'chrome://mozapps/skin/extensions/'?)

   Other places where Firefox keeps icons are:
   + chrome://mozapps/skin/extensions/
   + chrome://global/skin/icons/
** TODO scanTabs() better updating of windows
   When scanning the currently open tabs, the windows should be updated in more
   detail. If a tab is found in a window, that is not present in storage it
   should be added, and if there's an open tab in storage that does not exist
   in the window it should be a) removed if it has been moved to a different
   window, or b) noted as 'closed' in storage.
** TODO Should normalizeFavicon() treat SVG separately?
   (This is only interesting insofar as it reduces file size in
   `storage.local`.) For SVGs, maybe keep the original, rather than convert to
   PNG? (Check size difference, keep most compact version.)
** [0/3] Rewin light mode
*** TODO Make browser extension icon look good
*** TODO `popup-next.svg`
*** TODO `popup-prev.svg`
** TODO Track & restore: alwaysOnTop, incognito, state and sessionId
   On Firefox restart, restore fullscreen and minified windows Firefox seem to
   totally forget if windows where fullscreen or minified when restoring them.
   :(

   Also use?: lastAccessed, successorTabId, pinned, status, discarded(?)

   The `browser.windows.getAll()` return function returns the following stuff
   that we want to track/restore.

   state = normal, minimized, maximized, fullscreen, docked
   (https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/windows/WindowState)

   sessionId -- for restoring recently closed tabs/windows
   (https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/sessions)
** TODO Popup should allow for up/down arrow key navigation
   + â = open (selected) submenu (same as enter or space)
   + â = go back one submenu
   + â = same as Tab
   + â = same as Shift+Tab
** TODO Popup should have centered Submenu headings
   Just like in Firefox menus, under e.g. "History > Bookmarks" then
   "Bookmarks" is the centered name at the top of the submenu.
** TODO Popup scrolling in submenus
   Scroll position of the parent menu should not affect submenu.
** TODO Use `browser.tabs.update()` to load tabs?
   This would mean that we don't need any content scripts (I think).

   Also, need to update 'Restoring History' in the docs, after implementing
   this.
** TODO Manifest permissions for more `storage.local`
   "permissions": [
     "storage",
     "unlimitedStorage"
   ]
   + Default: ~2 GB per extension.
   + With "unlimitedStorage" there's no strict cap, but limited by user disk
     space and global Firefox quotas (typically up to 10% of disk or 10 GB).
** TODO Verify that creating new tab updates state correctly
** TODO Verify that creating new window updates state correctly
** TODO Handle history for private window separately
   browser.tabs.getCurrent().then(tab => {
     if (tab.incognito) {
       console.log(`Tab ID: ${tab.id} is in a Private Window.`);
       // Perform actions specific to private tabs
     } else {
       console.log(`Tab ID: ${tab.id} is in a Regular Window.`);
       // Perform actions specific to regular tabs
     }
   })
** TODO Use icon badge text to show when there is restored history
   A badge text should indicate with a number how many restored history items
   are available through the extensions own history menu (that isn't accessible
   through the usual â Back button)
** TODO Permission 'Run in Private Windows'
   Can this permission be requested on install? It shows up on the 'Manage
   Extension' settings (visible if on right-click of the extension icon).
** TODO Permission 'Run on sites with restrictions'
   Can this permission be requested on install? It shows up on the 'Manage
   Extension' settings (visible if on right-click of the extension icon).
** TODO file:// access
   If you specifically need file:// access, check if `tab.url` starts with
   `file:` and consider reminding the user to enable file access in
   `about:addons` if it's crucial.

  if (tabUrl.startsWith("file:") && !user_has_enabled_file_access_option) {
    console.warn("File URL detected. User might need to enable 'Run on file:// URLs' in about:addons.");
    // You might provide a link or guide the user here.
  }

  browser.action.onClicked.addListener(() => {
    browser.permissions.request({
      origins: ["file:///*"]
    }).then((granted) => {
      if (granted) {
        console.log("Permission granted!")
      } else {
        console.log("Permission denied.")
      }
    })
  })
** TODO `onFocusChanged` seem to generate multiple events -- optimize?
** TODO `onActivated` seem to generate multiple events -- optimize?
** TODO Warn when close to filling up quota
   Set badge text to '!' and display a warning in the popup menu.

   https://developer.mozilla.org/en-US/docs/Web/API/Storage_API/Storage_quotas_and_eviction_criteria
   Web developers can check how much space is available for their origin and
   how much is being used by the origin with the `navigator.storage.estimate()`
   method of the Storage API.
** TODO Find reliable way of populating history menu
   When restoring a non-recent tab, is there a way of populating a tab's
   history? The naÃ¯ve approach only populates the history, as seen from
   Javascript---it does not populate the back/forward menu visible to the user.
   Except, this is not completely true. Sometimes this menu IS populated. Is
   there a way to make this reliable?

   Below is some older code related to this.

     function injectionLoad(tabId, url) {
       runInTab(tabId, url => {
         let link = document.createElement('a')
         link.href = url
         link.target = '_self'
         document.body.appendChild(link)
         link.click()
       }, url)
     }

     function injectionLoadHere(url) {
       console.log('injectionLoadHere')
       let link = document.createElement('a')
       link.href = url
       link.target = '_self'
       document.body.appendChild(link)
       link.click()
     }

     function outInTab(tabId, ...msg) {
       runInTab(tabId, x => console.log(...x), msg)
     }

     function duplicateCurrentTab() {
       return browser.tabs.query({ currentWindow: true, active: true })
         .then(([{ id: tabId }]) => browser.tabs.duplicate(tabId))
     }

     function onButton(tab) {
       outInTab(tab.id, '--------------------------------------------------')
       outInTab(tab.id, "XXX Rewin button clicked!", tab)

       let urls = [
         'https://klingonska.org',
         'https://zrajm.org',
         'https://zrajm.devel/rewin',
       ]

       // browser.webNavigation.onHistoryStateUpdated.addListener(onHistoryUpdate)

       // 1. Get list of URL to load into history
       // 2. Open new tab
       // 3. Set `pushState()` hook finishing
       //    3.1. If there are no more URL items, remove `pushState()` hook
       //    3.2. Invoke `pushState()` on next URL item
       // 4. Invoke pustState() or first URL item

       //duplicateCurrentTab()
       getCurrentTab().then(tabDetails => {// duplicate tab
         const { id: tabId, oldTabId } = tabDetails

         runInTab(tabId, (oldTabId, ...urls) => {

           //location.reload()

           // Random string (9 byte = 72bit = 12 characters in websafe base64).
           function randomStr() {
             return btoa(String.fromCharCode(
               ...crypto.getRandomValues(new Uint8Array(9))))
               .replace(/[+/]/g, x => ({ '+': '-', '/': '_' }[x]))
           }

           // Add URL param 'rewin' with random string.
           function setRewinParam(baseUrl, url) {
             baseUrl = new URL(baseUrl)
             baseUrl.searchParams.set('rewin_url', url)
             baseUrl.searchParams.set('rewin', randomStr())
             return baseUrl.toString()
           }

           function addToHistory(...urls) {
             const orgTitle = document.title
             function addHistoryItem(cmd, baseUrl, url, ...urls) {
               console.log("HEREXX:", url)
               if (navigator.userActivation.hasBeenActive) { console.log('(has)') }
               if (navigator.userActivation?.isActive) { console.log('(is)') }

               const title = url.replace(/.*?\/\//, '') // URL without 'http://' part
               const fakeUrl = urls.length > 0 ? setRewinParam(location, url) : url

               history[cmd]({ fakeUrl }, title, fakeUrl)
               document.title = urls.length > 0 ? `${urls.length} ${title}` : orgTitle
               console.log(document.title)

               // outElement.insertAdjacentHTML(
               //   'beforeend',
               //   `${urls.length} <tt>${url}</tt><br><tt>${fakeUrl}<br>`)

               if (urls.length) {
                 setTimeout(addHistoryItem, 1, 'pushState', baseUrl, ...urls)
               }
             }
             setTimeout(addHistoryItem, 1, 'replaceState', location.origin, ...urls, `${location}`)
           }

           addToHistory(...urls)

         }, oldTabId, ...urls)

         //outInTab(oldTabId, 'TAB DUPLICATED')
       })
     }
** TODO DISTANT FUTURE
*** TODO 'Open link in duplicate tab'
    Context menu options for opening a new tab/window/private window which
    copies the history of the current tab into newly created one.

     function duplicateCurrentTab() {
       return browser.tabs.query({ currentWindow: true, active: true })
         .then(([{ id: tabId }]) => browser.tabs.duplicate(tabId))
     }
*** TODO Make history searchable
    What would this entail? Should only history be searchable? (If so, it might
    need to be added to the Rewin internal state.)
* [4/4] FINISHED
** DONE Write data structure section
   CLOSED: [2025-06-14 Sat 03:05]
** DONE Add license files
   CLOSED: [2025-06-14 Sat 03:10]
** DONE Designed a popup menu
   CLOSED: [2025-06-14 Sat 11:37]
   Doesn't really have any logic (yet).
** DONE Added submenus to popup menu
   CLOSED: [2025-06-17 Tue 21:24]
* [eof]
